(function(a,e){typeof exports=="object"&&typeof module<"u"?e(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("react"),require("@mui/material")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","react","@mui/material"],e):(a=typeof globalThis<"u"?globalThis:a||self,e(a.pluginLib,a.pluginLib.ReactJSX,a.pluginLib.React,a.pluginLib.MuiMaterial))})(this,function(a,e,q,t){"use strict";const p=(o=>o&&typeof o=="object"&&"default"in o?o:{default:o})(q),D="tcpdump-capture-ds",c="kubexm-capture",U="app=tcpdump-capture",E="kubexm-capture-backend-svc",z="tcm",A="pcap-cleanup-ds";function W(o,x){const r="/captures/${NODE_NAME}.pcap";return{apiVersion:"apps/v1",kind:"DaemonSet",metadata:{name:D,namespace:c},spec:{selector:{matchLabels:{app:"tcpdump-capture"}},template:{metadata:{labels:{app:"tcpdump-capture"}},spec:{hostNetwork:!0,hostPID:!0,tolerations:[{key:"node-role.kubernetes.io/master",effect:"NoSchedule"},{key:"node-role.kubernetes.io/control-plane",effect:"NoSchedule"}],volumes:[{name:"capture-storage",hostPath:{path:"/tmp/captures",type:"DirectoryOrCreate"}}],containers:[{name:"tcpdump-container",image:x,command:["/bin/sh","-c"],args:[`echo "Cleaning up old capture file: ${r}" && rm -f "${r}" && echo 'Starting tcpdump on all interfaces (any) with filter: ${o}' && tcpdump -i any -s0 -w "/captures/\${NODE_NAME}.pcap" '${o}'`],env:[{name:"NODE_NAME",valueFrom:{fieldRef:{fieldPath:"spec.nodeName"}}}],volumeMounts:[{name:"capture-storage",mountPath:"/captures"}],securityContext:{privileged:!0}}]}}}}}function j(o){return{apiVersion:"apps/v1",kind:"DaemonSet",metadata:{name:A,namespace:c},spec:{selector:{matchLabels:{app:"pcap-cleanup"}},template:{metadata:{labels:{app:"pcap-cleanup"}},spec:{tolerations:[{operator:"Exists"}],containers:[{name:"cleanup-container",image:o,command:["/bin/sh","-c"],args:['echo "Cleaning up pcap files in /host/tmp/captures..."; rm -f /host/tmp/captures/*.pcap; echo "Cleanup complete. Pod will now terminate."; sleep 5'],volumeMounts:[{name:"host-tmp",mountPath:"/host/tmp"}]}],restartPolicy:"OnFailure",volumes:[{name:"host-tmp",hostPath:{path:"/tmp"}}]}}}}}function J(){const[o,x]=p.default.useState(!1),[r,m]=p.default.useState(!0),[P,h]=p.default.useState(null),[b,w]=p.default.useState(!1),[B,V]=p.default.useState(""),[F,G]=p.default.useState("registry.dev.rdev.tech:18093/headlamp/universal-toolkit:1.0"),[I,_]=p.default.useState([]),[T,i]=p.default.useState(""),N=`/apis/apps/v1/namespaces/${c}/daemonsets/${D}`,K=`/api/v1/namespaces/${c}`,L=`/api/v1/namespaces/${c}/pods?labelSelector=${U}`,v=p.default.useCallback(async()=>{m(!0),h(null);const s=3,l=2e3;for(let y=1;y<=s;y++)try{await a.ApiProxy.request(N),x(!0);const n=`${L}&t=${new Date().getTime()}`,C=await a.ApiProxy.request(n);_(C.items||[]),m(!1);return}catch(n){if(n.status===404){x(!1),_([]),m(!1);return}if(y<s)console.warn(`Attempt ${y} failed, retrying in ${l/1e3}s...`,n),await new Promise(C=>setTimeout(C,l));else{console.error("Failed to check DaemonSet status after multiple retries:",n),h(`检查抓包工具状态失败: ${n.message||"Unreachable"}`),m(!1);return}}},[N,L]);p.default.useEffect(()=>{v()},[v]);const H=async()=>{try{await a.ApiProxy.request(K)}catch(s){if(s.status===404){console.log(`Namespace ${c} not found, creating it...`);try{await a.ApiProxy.request("/api/v1/namespaces",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({apiVersion:"v1",kind:"Namespace",metadata:{name:c}})})}catch(l){throw new Error(`创建命名空间 ${c} 失败: ${l.message}`)}}else throw s}},X=async()=>{m(!0),h(null);try{await H();const s=W(B,F);await a.ApiProxy.request(`/apis/apps/v1/namespaces/${c}/daemonsets`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}),setTimeout(v,2e3)}catch(s){console.error("Failed to start capture:",s),h(`启动抓包失败: ${s.message||"未知错误"}`),m(!1)}},Q=async()=>{m(!0),h(null);try{await a.ApiProxy.request(N,{method:"DELETE"}),setTimeout(v,2e3)}catch(s){console.error("Failed to stop capture:",s),h(`停止抓包失败: ${s.message||"未知错误"}`),m(!1)}};p.default.useCallback(async()=>{try{const s=await a.K8s.ResourceClasses.Service.apiGet({name:E,namespace:z});if(!s||!s.spec||!s.spec.ports||s.spec.ports.length===0)throw new Error(`Service "${E}" has no spec.ports defined.`);const l=s.spec.ports[0];if(l&&l.nodePort)return console.log(`Successfully fetched NodePort: ${l.nodePort}`),l.nodePort;throw new Error(`Service "${E}" found, but it has no nodePort defined.`)}catch(s){throw console.error(`Failed to get backend NodePort service: ${s}`),new Error(`无法获取后端服务端口: ${s.message||"未知错误"}`)}},[]);const Y=async()=>{w(!0),h(null),i("正在连接后端...");const s=window.location.hostname,l=31138,y=`ws://${s}:${l}/ws`,n=new WebSocket(y);n.onopen=()=>{i("连接成功，正在发送任务...");const f="task-"+Date.now(),u=I.map(d=>({name:d.metadata.name,nodeName:d.spec.nodeName}));n.send(JSON.stringify({taskID:f,podsToCollect:u}))};const C=async()=>{i("正在清理节点上的残留文件...");const f=j(),u=`/apis/apps/v1/namespaces/${c}/daemonsets/${A}`;try{await a.ApiProxy.post(`/apis/apps/v1/namespaces/${c}/daemonsets`,f),console.log("Cleanup DaemonSet created."),i("清理任务已启动，等待各节点执行...");const d=3e3,g=6e4,Z=Date.now(),M=async()=>{if(Date.now()-Z>g)throw new Error("清理任务超时。");const k=await a.ApiProxy.request(u),$=k.status.desiredNumberScheduled,R=k.status.updatedNumberScheduled,O=k.status.numberAvailable;if(i(`清理进度: ${O||0} / ${$||"?"} 个节点已完成`),$>0&&$===R&&$===O){console.log("Cleanup seems complete.");return}await new Promise(ee=>setTimeout(ee,d)),await M()};await M()}catch(d){console.error("Failed during cleanup process:",d)}finally{try{await a.ApiProxy.delete(u),console.log("Cleanup DaemonSet deleted."),i("清理完成！")}catch(d){d.status!==404?(console.error("Failed to delete cleanup DaemonSet:",d),i("文件已下载，但自动清理DS失败。")):(console.log("Cleanup DaemonSet already gone."),i("清理完成！"))}}};n.onmessage=f=>{const u=JSON.parse(f.data);if(i(u.message),u.status==="complete"){i("任务完成，正在触发下载...");const d=`http://${s}:${l}${u.url}`,g=document.createElement("a");g.href=d,g.download=`cluster-capture-${new Date().toISOString()}.pcap`,document.body.appendChild(g),g.click(),document.body.removeChild(g),n.close(),C(),w(!1),setTimeout(v,2e3)}u.status==="error"&&(h(`后端任务失败: ${u.message}`),n.close(),w(!1))},n.onerror=f=>{h("WebSocket 连接错误"),console.error("WebSocket error:",f),w(!1)},n.onclose=()=>{console.log("WebSocket 连接已关闭"),!P&&T!=="任务完成，正在触发下载..."&&w(!1)}};return e.jsxs(t.Paper,{sx:{m:2,p:3},children:[e.jsx(t.Typography,{variant:"h4",gutterBottom:!0,children:"集群网络抓包工具"}),P&&e.jsx(t.Alert,{severity:"error",sx:{mb:2},children:P}),b&&T&&e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center"},children:[e.jsx(t.CircularProgress,{size:20,sx:{mr:2}}),e.jsx(t.Typography,{children:T})]})}),e.jsxs(t.Box,{sx:{p:2,border:"1px solid",borderColor:"divider",borderRadius:1,mb:4},children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"控制面板"}),e.jsxs(t.Box,{children:[e.jsx(t.TextField,{label:"抓包镜像",fullWidth:!0,variant:"outlined",size:"small",value:F,onChange:s=>G(s.target.value),disabled:o||r,sx:{mb:2}}),e.jsxs(t.Box,{sx:{display:"flex",gap:2,alignItems:"center",flexWrap:"wrap"},children:[e.jsx(t.TextField,{label:"抓包过滤规则 (BPF Filter)",variant:"outlined",size:"small",value:B,onChange:s=>V(s.target.value),disabled:o||r,sx:{flexGrow:1,minWidth:"300px"}}),o?e.jsxs(e.Fragment,{children:[e.jsx(t.Button,{variant:"contained",color:"secondary",onClick:Y,disabled:r,startIcon:b&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:b?"正在处理...":"停止并下载"}),e.jsx(t.Button,{variant:"outlined",color:"error",onClick:Q,disabled:r,startIcon:r&&!b&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:r&&!b?"正在停止...":"仅停止 (不下载)"})]}):e.jsx(t.Button,{variant:"contained",color:"primary",onClick:X,disabled:r,startIcon:r&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:r?"正在启动...":"开始抓包"})]})]})]}),e.jsxs(t.Box,{children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"状态"}),r&&!P&&e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center",mt:2},children:[e.jsx(t.CircularProgress,{size:24}),e.jsx(t.Typography,{sx:{ml:2},children:"正在加载状态..."})]}),!r&&(o?e.jsxs(e.Fragment,{children:[e.jsxs(t.Alert,{severity:"success",sx:{mb:2},children:["抓包正在进行中... DaemonSet '",D,"' 已在 ",e.jsx("strong",{children:c})," 命名空间部署。"]}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包文件说明"}),e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:'新功能: 点击 "停止并下载" 按钮会自动收集所有节点的抓包文件，合并后提供下载，并清理抓包环境。'}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包 Pod 状态"}),e.jsx(t.TableContainer,{component:t.Paper,variant:"outlined",children:e.jsxs(t.Table,{size:"small",children:[e.jsx(t.TableHead,{children:e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:"Pod 名称"}),e.jsx(t.TableCell,{children:"所在节点"}),e.jsx(t.TableCell,{children:"状态"})]})}),e.jsx(t.TableBody,{children:I.map(s=>e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:s.metadata.name}),e.jsx(t.TableCell,{children:s.spec.nodeName}),e.jsx(t.TableCell,{children:s.status.phase})]},s.metadata.uid))})]})})]}):e.jsx(t.Alert,{severity:"info",children:'抓包工具当前未运行。请配置参数后点击 "开始抓包"。'}))]})]})}const S="kubexm-capture";a.registerSidebarEntry({parent:null,name:S,label:"网络抓包工具",url:`/${S}`,icon:"mdi:bug-outline"}),a.registerRoute({path:`/${S}`,sidebar:S,name:S,exact:!0,component:J})});
