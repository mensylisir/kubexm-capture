(function(s,e){typeof exports=="object"&&typeof module<"u"?e(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("react"),require("@mui/material")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","react","@mui/material"],e):(s=typeof globalThis<"u"?globalThis:s||self,e(s.pluginLib,s.pluginLib.ReactJSX,s.pluginLib.React,s.pluginLib.MuiMaterial))})(this,function(s,e,q,t){"use strict";const d=(n=>n&&typeof n=="object"&&"default"in n?n:{default:n})(q),D="tcpdump-capture-ds",p="kubexm-capture",z="app=tcpdump-capture",E="kubexm-capture-backend-svc",U="tcm",B="pcap-cleanup-ds";function W(n,P){const a="/captures/${NODE_NAME}.pcap";return{apiVersion:"apps/v1",kind:"DaemonSet",metadata:{name:D,namespace:p},spec:{selector:{matchLabels:{app:"tcpdump-capture"}},terminationGracePeriodSeconds:60,template:{metadata:{labels:{app:"tcpdump-capture"}},spec:{hostNetwork:!0,hostPID:!0,tolerations:[{key:"node-role.kubernetes.io/master",effect:"NoSchedule"},{key:"node-role.kubernetes.io/control-plane",effect:"NoSchedule"}],volumes:[{name:"capture-storage",hostPath:{path:"/tmp/captures",type:"DirectoryOrCreate"}}],containers:[{name:"tcpdump-container",image:P,command:["/bin/sh","-c"],args:[`set -e; echo "--- Capture Pod Initializing ---"; echo "Checking for old file at ${a}..."; if [ -f "${a}" ]; then   echo "Old file found. Size: $(ls -lh "${a}" | awk '{print $5}')";   echo "Attempting to remove old file...";   rm -f "${a}";   if [ $? -eq 0 ]; then echo "Old file successfully removed."; else echo "ERROR: Failed to remove old file!"; exit 1; fi; else   echo "No old file found. Proceeding."; fi; echo 'Starting tcpdump on all interfaces (any) with filter: ${n}' && tcpdump -i any -s0 -w "/captures/\${NODE_NAME}.pcap" '${n}';`],env:[{name:"NODE_NAME",valueFrom:{fieldRef:{fieldPath:"spec.nodeName"}}}],volumeMounts:[{name:"capture-storage",mountPath:"/captures"}],securityContext:{privileged:!0}}]}}}}}function j(n){return{apiVersion:"apps/v1",kind:"DaemonSet",metadata:{name:B,namespace:p},spec:{selector:{matchLabels:{app:"pcap-cleanup"}},template:{metadata:{labels:{app:"pcap-cleanup"}},spec:{tolerations:[{operator:"Exists"}],containers:[{name:"cleanup-container",image:n,command:["/bin/sh","-c"],args:['echo "Cleaning up pcap files in /host/tmp/captures..."; rm -f /host/tmp/captures/*.pcap; echo "Cleanup complete. Pod will now terminate."; sleep 5'],volumeMounts:[{name:"host-tmp",mountPath:"/host/tmp"}]}],volumes:[{name:"host-tmp",hostPath:{path:"/tmp"}}]}}}}}function J(){const[n,P]=d.default.useState(!1),[a,f]=d.default.useState(!0),[x,h]=d.default.useState(null),[b,v]=d.default.useState(!1),[F,V]=d.default.useState(""),[T,G]=d.default.useState("registry.dev.rdev.tech:18093/headlamp/universal-toolkit:1.0"),[I,_]=d.default.useState([]),[k,c]=d.default.useState(""),A=`/apis/apps/v1/namespaces/${p}/daemonsets/${D}`,K=`/api/v1/namespaces/${p}`,L=`/api/v1/namespaces/${p}/pods?labelSelector=${z}`,C=d.default.useCallback(async()=>{f(!0),h(null);const o=3,i=2e3;for(let y=1;y<=o;y++)try{await s.ApiProxy.request(A),P(!0);const l=`${L}&t=${new Date().getTime()}`,S=await s.ApiProxy.request(l);_(S.items||[]),f(!1);return}catch(l){if(l.status===404){P(!1),_([]),f(!1);return}if(y<o)console.warn(`Attempt ${y} failed, retrying in ${i/1e3}s...`,l),await new Promise(S=>setTimeout(S,i));else{console.error("Failed to check DaemonSet status after multiple retries:",l),h(`检查抓包工具状态失败: ${l.message||"Unreachable"}`),f(!1);return}}},[A,L]);d.default.useEffect(()=>{C()},[C]);const H=async()=>{try{await s.ApiProxy.request(K)}catch(o){if(o.status===404){console.log(`Namespace ${p} not found, creating it...`);try{await s.ApiProxy.request("/api/v1/namespaces",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({apiVersion:"v1",kind:"Namespace",metadata:{name:p}})})}catch(i){throw new Error(`创建命名空间 ${p} 失败: ${i.message}`)}}else throw o}},X=async()=>{f(!0),h(null);try{await H();const o=W(F,T);await s.ApiProxy.request(`/apis/apps/v1/namespaces/${p}/daemonsets`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}),setTimeout(C,2e3)}catch(o){console.error("Failed to start capture:",o),h(`启动抓包失败: ${o.message||"未知错误"}`),f(!1)}},Q=async()=>{f(!0),h(null);try{await s.ApiProxy.request(A,{method:"DELETE"}),setTimeout(C,2e3)}catch(o){console.error("Failed to stop capture:",o),h(`停止抓包失败: ${o.message||"未知错误"}`),f(!1)}};d.default.useCallback(async()=>{try{const o=await s.K8s.ResourceClasses.Service.apiGet({name:E,namespace:U});if(!o||!o.spec||!o.spec.ports||o.spec.ports.length===0)throw new Error(`Service "${E}" has no spec.ports defined.`);const i=o.spec.ports[0];if(i&&i.nodePort)return console.log(`Successfully fetched NodePort: ${i.nodePort}`),i.nodePort;throw new Error(`Service "${E}" found, but it has no nodePort defined.`)}catch(o){throw console.error(`Failed to get backend NodePort service: ${o}`),new Error(`无法获取后端服务端口: ${o.message||"未知错误"}`)}},[]);const Y=async()=>{v(!0),h(null),c("正在连接后端...");const o=window.location.hostname,i=31138,y=`ws://${o}:${i}/ws`,l=new WebSocket(y);l.onopen=()=>{c("连接成功，正在发送任务...");const m="task-"+Date.now(),u=I.map(r=>({name:r.metadata.name,nodeName:r.spec.nodeName}));l.send(JSON.stringify({taskID:m,podsToCollect:u}))};const S=async()=>{c("正在清理节点上的残留文件...");const m=j(T),u=`/apis/apps/v1/namespaces/${p}/daemonsets/${B}`;try{await s.ApiProxy.post(`/apis/apps/v1/namespaces/${p}/daemonsets`,m),console.log("Cleanup DaemonSet created."),c("清理任务已启动，等待各节点执行...");const r=3e3,g=6e4,Z=Date.now(),O=async()=>{if(Date.now()-Z>g)throw new Error("清理任务超时。");const N=await s.ApiProxy.request(u),$=N.status.desiredNumberScheduled,R=N.status.updatedNumberScheduled,M=N.status.numberAvailable;if(c(`清理进度: ${M||0} / ${$||"?"} 个节点已完成`),$>0&&$===R&&$===M){console.log("Cleanup seems complete.");return}await new Promise(ee=>setTimeout(ee,r)),await O()};await O()}catch(r){console.error("Failed during cleanup process:",r)}finally{try{await s.ApiProxy.delete(u),console.log("Cleanup DaemonSet deleted."),c("清理完成！")}catch(r){r.status!==404?(console.error("Failed to delete cleanup DaemonSet:",r),c("文件已下载，但自动清理DS失败。")):(console.log("Cleanup DaemonSet already gone."),c("清理完成！"))}}try{await new Promise(r=>setTimeout(r,5e3)),console.log("Attempting to delete cleanup DaemonSet..."),await s.ApiProxy.delete(u),console.log("Cleanup DaemonSet deleted."),c("清理完成！")}catch(r){r.status!==404?(console.error("Failed to delete cleanup DaemonSet:",r),c("文件已下载，但自动清理DS失败。")):(console.log("Cleanup DaemonSet already gone."),c("清理完成！"))}finally{c("清理完成！")}};l.onmessage=m=>{const u=JSON.parse(m.data);if(c(u.message),u.status==="complete"){c("任务完成，正在触发下载...");const r=`http://${o}:${i}${u.url}`,g=document.createElement("a");g.href=r,g.download=`cluster-capture-${new Date().toISOString()}.pcap`,document.body.appendChild(g),g.click(),document.body.removeChild(g),l.close(),S(),v(!1),setTimeout(C,2e3)}u.status==="error"&&(h(`后端任务失败: ${u.message}`),l.close(),v(!1))},l.onerror=m=>{h("WebSocket 连接错误"),console.error("WebSocket error:",m),v(!1)},l.onclose=()=>{console.log("WebSocket 连接已关闭"),S(),!x&&k!=="任务完成，正在触发下载..."&&v(!1)}};return e.jsxs(t.Paper,{sx:{m:2,p:3},children:[e.jsx(t.Typography,{variant:"h4",gutterBottom:!0,children:"集群网络抓包工具"}),x&&e.jsx(t.Alert,{severity:"error",sx:{mb:2},children:x}),b&&k&&e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center"},children:[e.jsx(t.CircularProgress,{size:20,sx:{mr:2}}),e.jsx(t.Typography,{children:k})]})}),e.jsxs(t.Box,{sx:{p:2,border:"1px solid",borderColor:"divider",borderRadius:1,mb:4},children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"控制面板"}),e.jsxs(t.Box,{children:[e.jsx(t.TextField,{label:"抓包镜像",fullWidth:!0,variant:"outlined",size:"small",value:T,onChange:o=>G(o.target.value),disabled:n||a,sx:{mb:2}}),e.jsxs(t.Box,{sx:{display:"flex",gap:2,alignItems:"center",flexWrap:"wrap"},children:[e.jsx(t.TextField,{label:"抓包过滤规则 (BPF Filter)",variant:"outlined",size:"small",value:F,onChange:o=>V(o.target.value),disabled:n||a,sx:{flexGrow:1,minWidth:"300px"}}),n?e.jsxs(e.Fragment,{children:[e.jsx(t.Button,{variant:"contained",color:"secondary",onClick:Y,disabled:a,startIcon:b&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:b?"正在处理...":"停止并下载"}),e.jsx(t.Button,{variant:"outlined",color:"error",onClick:Q,disabled:a,startIcon:a&&!b&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:a&&!b?"正在停止...":"仅停止 (不下载)"})]}):e.jsx(t.Button,{variant:"contained",color:"primary",onClick:X,disabled:a,startIcon:a&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:a?"正在启动...":"开始抓包"})]})]})]}),e.jsxs(t.Box,{children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"状态"}),a&&!x&&e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center",mt:2},children:[e.jsx(t.CircularProgress,{size:24}),e.jsx(t.Typography,{sx:{ml:2},children:"正在加载状态..."})]}),!a&&(n?e.jsxs(e.Fragment,{children:[e.jsxs(t.Alert,{severity:"success",sx:{mb:2},children:["抓包正在进行中... DaemonSet '",D,"' 已在 ",e.jsx("strong",{children:p})," 命名空间部署。"]}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包文件说明"}),e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:'点击 "停止并下载" 按钮会自动收集所有节点的抓包文件，合并后提供下载，并清理抓包环境。'}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包 Pod 状态"}),e.jsx(t.TableContainer,{component:t.Paper,variant:"outlined",children:e.jsxs(t.Table,{size:"small",children:[e.jsx(t.TableHead,{children:e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:"Pod 名称"}),e.jsx(t.TableCell,{children:"所在节点"}),e.jsx(t.TableCell,{children:"状态"})]})}),e.jsx(t.TableBody,{children:I.map(o=>e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:o.metadata.name}),e.jsx(t.TableCell,{children:o.spec.nodeName}),e.jsx(t.TableCell,{children:o.status.phase})]},o.metadata.uid))})]})})]}):e.jsx(t.Alert,{severity:"info",children:'抓包工具当前未运行。请配置参数后点击 "开始抓包"。'}))]})]})}const w="kubexm-capture";s.registerSidebarEntry({parent:null,name:w,label:"网络抓包工具",url:`/${w}`,icon:"mdi:bug-outline"}),s.registerRoute({path:`/${w}`,sidebar:w,name:w,exact:!0,component:J})});
