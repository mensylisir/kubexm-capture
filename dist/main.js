(function(o,e){typeof exports=="object"&&typeof module<"u"?e(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("react"),require("@mui/material")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","react","@mui/material"],e):(o=typeof globalThis<"u"?globalThis:o||self,e(o.pluginLib,o.pluginLib.ReactJSX,o.pluginLib.React,o.pluginLib.MuiMaterial))})(this,function(o,e,U,t){"use strict";const i=(p=>p&&typeof p=="object"&&"default"in p?p:{default:p})(U),{post:z,request:W,delete:B}=o.ApiProxy,b="tcpdump-capture-ds",d="kubexm-capture",j="app=tcpdump-capture",x="kubexm-capture-backend-svc",J="tcm",D="pcap-cleanup-ds";function V(p,v){const c="/captures/${NODE_NAME}.pcap";return{apiVersion:"apps/v1",kind:"DaemonSet",metadata:{name:b,namespace:d},spec:{selector:{matchLabels:{app:"tcpdump-capture"}},terminationGracePeriodSeconds:60,template:{metadata:{labels:{app:"tcpdump-capture"}},spec:{hostNetwork:!0,hostPID:!0,tolerations:[{key:"node-role.kubernetes.io/master",effect:"NoSchedule"},{key:"node-role.kubernetes.io/control-plane",effect:"NoSchedule"}],volumes:[{name:"capture-storage",hostPath:{path:"/tmp/captures",type:"DirectoryOrCreate"}}],containers:[{name:"tcpdump-container",image:v,command:["/bin/sh","-c"],args:[`set -e; echo "--- Capture Pod Initializing ---"; echo "Checking for old file at ${c}..."; if [ -f "${c}" ]; then   echo "Old file found. Size: $(ls -lh "${c}" | awk '{print $5}')";   echo "Attempting to remove old file...";   rm -f "${c}";   if [ $? -eq 0 ]; then echo "Old file successfully removed."; else echo "ERROR: Failed to remove old file!"; exit 1; fi; else   echo "No old file found. Proceeding."; fi; echo 'Starting tcpdump on all interfaces (any) with filter: ${p}' && tcpdump -i any -s0 -w "/captures/\${NODE_NAME}.pcap" '${p}';`],env:[{name:"NODE_NAME",valueFrom:{fieldRef:{fieldPath:"spec.nodeName"}}}],volumeMounts:[{name:"capture-storage",mountPath:"/captures"}],securityContext:{privileged:!0}}]}}}}}function G(p){return{apiVersion:"apps/v1",kind:"DaemonSet",metadata:{name:D,namespace:d},spec:{selector:{matchLabels:{app:"pcap-cleanup"}},template:{metadata:{labels:{app:"pcap-cleanup"}},spec:{tolerations:[{operator:"Exists"}],containers:[{name:"cleanup-container",image:p,command:["/bin/sh","-c"],args:['echo "Cleaning up pcap files in /host/tmp/captures..."; find /host/tmp/captures -name "*.pcap" -type f -delete || true; echo "Cleanup complete. Pod will now terminate."; sleep 5'],volumeMounts:[{name:"host-tmp",mountPath:"/host/tmp"}]}],volumes:[{name:"host-tmp",hostPath:{path:"/tmp"}}]}}}}}function K(){const[p,v]=i.default.useState(!1),[c,g]=i.default.useState(!0),[E,h]=i.default.useState(null),[w,C]=i.default.useState(!1),[_,H]=i.default.useState(""),[T,X]=i.default.useState("registry.dev.rdev.tech:18093/headlamp/universal-toolkit:1.0"),[k,F]=i.default.useState([]),[L,l]=i.default.useState(""),[A,O]=i.default.useState(0),[$,Q]=i.default.useState(10),N=`/apis/apps/v1/namespaces/${d}/daemonsets/${b}`,Y=`/api/v1/namespaces/${d}`,q=`/api/v1/namespaces/${d}/pods?labelSelector=${j}`,P=i.default.useCallback(async()=>{g(!0),h(null);const s=3,a=2e3;for(let f=1;f<=s;f++)try{await o.ApiProxy.request(N),v(!0);const r=`${q}&t=${new Date().getTime()}`,u=await o.ApiProxy.request(r);F(u.items||[]),g(!1);return}catch(r){if(r.status===404){v(!1),F([]),g(!1);return}if(f<s)console.warn(`Attempt ${f} failed, retrying in ${a/1e3}s...`,r),await new Promise(u=>setTimeout(u,a));else{console.error("Failed to check DaemonSet status after multiple retries:",r),h(`检查抓包工具状态失败: ${r.message||"Unreachable"}`),g(!1);return}}},[N,q]);i.default.useEffect(()=>{P()},[P]);const Z=async()=>{try{await o.ApiProxy.request(Y)}catch(s){if(s.status===404){console.log(`Namespace ${d} not found, creating it...`);try{await o.ApiProxy.request("/api/v1/namespaces",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({apiVersion:"v1",kind:"Namespace",metadata:{name:d}})})}catch(a){throw new Error(`创建命名空间 ${d} 失败: ${a.message}`)}}else throw s}},R=async()=>{g(!0),h(null);try{await M(),await Z();const s=V(_,T);await o.ApiProxy.request(`/apis/apps/v1/namespaces/${d}/daemonsets`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}),setTimeout(P,2e3)}catch(s){console.error("Failed to start capture:",s),h(`启动抓包失败: ${s.message||"未知错误"}`),g(!1)}},M=async()=>{const s=`/apis/apps/v1/namespaces/${d}/daemonsets/${D}`;g(!0),h(null);try{await o.ApiProxy.request(s),console.log("发现旧的 cleanup DaemonSet，正在删除..."),await B(s)}catch(a){a.status!==404&&console.error("检查或删除旧的 cleanup DS 时出错:",a)}};i.default.useCallback(async()=>{try{const s=await o.K8s.ResourceClasses.Service.apiGet({name:x,namespace:J});if(!s||!s.spec||!s.spec.ports||s.spec.ports.length===0)throw new Error(`Service "${x}" has no spec.ports defined.`);const a=s.spec.ports[0];if(a&&a.nodePort)return console.log(`Successfully fetched NodePort: ${a.nodePort}`),a.nodePort;throw new Error(`Service "${x}" found, but it has no nodePort defined.`)}catch(s){throw console.error(`Failed to get backend NodePort service: ${s}`),new Error(`无法获取后端服务端口: ${s.message||"未知错误"}`)}},[]);const I=async()=>{l("正在清理节点上的残留文件...");const s=G(T),a=`/apis/apps/v1/namespaces/${d}/daemonsets/${D}`;try{try{await o.ApiProxy.request(a),console.log("发现旧的 cleanup DaemonSet，正在删除..."),await B(a)}catch(n){n.status!==404&&console.error("检查或删除旧的 cleanup DS 时出错:",n)}await z(`/apis/apps/v1/namespaces/${d}/daemonsets`,s),console.log("Cleanup DaemonSet created."),l("清理任务已启动，等待完成...");const f=12e4,r=5e3,u=Date.now();for(;Date.now()-u<f;){try{const n=await W(a),m=n.status.desiredNumberScheduled,y=n.status.numberAvailable;if(l(`清理进度: ${y||0} / ${m||"?"} 个节点已完成`),m>0&&m===y){console.log("Cleanup seems complete.");break}}catch(n){if(n.status===404){console.log("Cleanup DS not found, assuming complete.");break}}await new Promise(n=>setTimeout(n,r))}}catch(f){console.error("清理文件过程中出错:",f),h(`清理节点文件失败: ${f.message}`)}finally{console.log(`等待 ${12e4/1e3} 秒后开始清理 cleanup DaemonSet...`),l(`等待 ${12e4/1e3} 秒后清理临时资源...`),setTimeout(async()=>{try{await o.ApiProxy.request(a,{method:"DELETE"}),console.log("Cleanup DaemonSet deleted after delay."),l("临时资源清理完成！")}catch(r){r.status!==404&&(console.error("延时后删除清理DS失败:",r),l("临时资源清理失败，请手动检查。"))}},12e4)}},ee=async s=>{g(!0),h(null),l("开始停止抓包...");try{await o.ApiProxy.request(N,{method:"DELETE"}),l("抓包工具已停止，正在清理文件..."),await I(),l("所有清理工作已完成！")}catch(a){a.status!==404?(console.error("停止和清理过程中出错:",a),h(`操作失败: ${a.message||"未知错误"}`)):(await I(),l("所有清理工作已完成！"))}finally{setTimeout(()=>{P(),C(!1),l("")},2e3)}},te=async()=>{C(!0),h(null),l("正在清理旧资源...");try{await M()}catch(u){h(`清理旧资源失败: ${u.message}`),C(!1),l("");return}const s=window.location.hostname,a=31138,f=`ws://${s}:${a}/ws`,r=new WebSocket(f);r.onopen=()=>{l("连接成功，正在发送任务...");const u="task-"+Date.now(),n=k.map(m=>({name:m.metadata.name,nodeName:m.spec.nodeName}));r.send(JSON.stringify({taskID:u,daemonSetName:b,podsToCollect:n}))},r.onmessage=u=>{const n=JSON.parse(u.data);if(l(n.message),n.status==="complete"){l("任务完成，正在触发下载...");const m=`http://${s}:${a}${n.url}`,y=document.createElement("a");y.href=m,y.download=`cluster-capture-${new Date().toISOString()}.pcap`,document.body.appendChild(y),y.click(),document.body.removeChild(y),r.close()}n.status==="error"&&(h(`后端任务失败: ${n.message}`),r.close())},r.onerror=u=>{h("WebSocket 连接错误"),console.error("WebSocket error:",u)},r.onclose=()=>{console.log("WebSocket 连接已关闭"),I().finally(()=>{C(!1),setTimeout(P,3e3)})}},se=(s,a)=>{O(a)},ae=s=>{Q(parseInt(s.target.value,10)),O(0)};return e.jsxs(t.Paper,{sx:{m:2,p:3},children:[e.jsx(t.Typography,{variant:"h4",gutterBottom:!0,children:"集群网络抓包工具"}),E&&e.jsx(t.Alert,{severity:"error",sx:{mb:2},children:E}),w&&L&&e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center"},children:[e.jsx(t.CircularProgress,{size:20,sx:{mr:2}}),e.jsx(t.Typography,{children:L})]})}),e.jsxs(t.Box,{sx:{p:2,border:"1px solid",borderColor:"divider",borderRadius:1,mb:4},children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"控制面板"}),e.jsxs(t.Box,{children:[e.jsx(t.TextField,{label:"抓包镜像",fullWidth:!0,variant:"outlined",size:"small",value:T,onChange:s=>X(s.target.value),disabled:p||c,sx:{mb:2}}),e.jsxs(t.Box,{sx:{display:"flex",gap:2,alignItems:"center",flexWrap:"wrap"},children:[e.jsx(t.TextField,{label:"抓包过滤规则 (BPF Filter)",variant:"outlined",size:"small",value:_,onChange:s=>H(s.target.value),disabled:p||c,sx:{flexGrow:1,minWidth:"300px"}}),p?e.jsxs(e.Fragment,{children:[e.jsx(t.Button,{variant:"contained",color:"secondary",onClick:te,disabled:c,startIcon:w&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:w?"正在处理...":"停止并下载"}),e.jsx(t.Button,{variant:"outlined",color:"error",onClick:()=>ee(),disabled:c,startIcon:c&&!w&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:c&&!w?"正在停止...":"仅停止 (不下载)"})]}):e.jsx(t.Button,{variant:"contained",color:"primary",onClick:R,disabled:c,startIcon:c&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:c?"正在启动...":"开始抓包"})]})]})]}),e.jsxs(t.Box,{children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"状态"}),c&&!E&&e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center",mt:2},children:[e.jsx(t.CircularProgress,{size:24}),e.jsx(t.Typography,{sx:{ml:2},children:"正在加载状态..."})]}),!c&&(p?e.jsxs(e.Fragment,{children:[e.jsxs(t.Alert,{severity:"success",sx:{mb:2},children:["抓包正在进行中... DaemonSet '",b,"' 已在 ",e.jsx("strong",{children:d})," 命名空间部署。"]}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包文件说明"}),e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:'点击 "停止并下载" 按钮会自动收集所有节点的抓包文件，合并后提供下载，并清理抓包环境。'}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包 Pod 状态"}),e.jsxs(t.Paper,{variant:"outlined",children:[e.jsx(t.TableContainer,{children:e.jsxs(t.Table,{size:"small",children:[e.jsx(t.TableHead,{children:e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:"Pod 名称"}),e.jsx(t.TableCell,{children:"所在节点"}),e.jsx(t.TableCell,{children:"状态"})]})}),e.jsx(t.TableBody,{children:k.slice(A*$,A*$+$).map(s=>e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:s.metadata.name}),e.jsx(t.TableCell,{children:s.spec.nodeName}),e.jsx(t.TableCell,{children:s.status.phase})]},s.metadata.uid))})]})}),e.jsx(t.TablePagination,{rowsPerPageOptions:[5,10,25,{label:"All",value:-1}],component:"div",count:k.length,rowsPerPage:$,page:A,onPageChange:se,onRowsPerPageChange:ae})]})]}):e.jsx(t.Alert,{severity:"info",children:'抓包工具当前未运行。请配置参数后点击 "开始抓包"。'}))]})]})}const S="kubexm-capture";o.registerSidebarEntry({parent:null,name:S,label:"网络抓包工具",url:`/${S}`,icon:"mdi:bug-outline"}),o.registerRoute({path:`/${S}`,sidebar:S,name:S,exact:!0,component:K})});
