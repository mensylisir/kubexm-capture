(function(r,e){typeof exports=="object"&&typeof module<"u"?e(require("@kinvolk/headlamp-plugin/lib"),require("react/jsx-runtime"),require("react"),require("@mui/material")):typeof define=="function"&&define.amd?define(["@kinvolk/headlamp-plugin/lib","react/jsx-runtime","react","@mui/material"],e):(r=typeof globalThis<"u"?globalThis:r||self,e(r.pluginLib,r.pluginLib.ReactJSX,r.pluginLib.React,r.pluginLib.MuiMaterial))})(this,function(r,e,I,t){"use strict";const l=(n=>n&&typeof n=="object"&&"default"in n?n:{default:n})(I),P="tcpdump-capture-ds",d="kubexm-capture",_="app=tcpdump-capture",T="kubexm-capture-backend-svc",F="tcm";function L(n,v){const o="/captures/${NODE_NAME}.pcap";return{apiVersion:"apps/v1",kind:"DaemonSet",metadata:{name:P,namespace:d},spec:{selector:{matchLabels:{app:"tcpdump-capture"}},template:{metadata:{labels:{app:"tcpdump-capture"}},spec:{hostNetwork:!0,hostPID:!0,tolerations:[{key:"node-role.kubernetes.io/master",effect:"NoSchedule"},{key:"node-role.kubernetes.io/control-plane",effect:"NoSchedule"}],volumes:[{name:"capture-storage",hostPath:{path:"/tmp/captures",type:"DirectoryOrCreate"}}],containers:[{name:"tcpdump-container",image:v,command:["/bin/sh","-c"],args:[`echo "Cleaning up old capture file: ${o}" && rm -f "${o}" && echo 'Starting tcpdump on all interfaces (any) with filter: ${n}' && tcpdump -i any -s0 -w "/captures/\${NODE_NAME}.pcap" '${n}'`],env:[{name:"NODE_NAME",valueFrom:{fieldRef:{fieldPath:"spec.nodeName"}}}],volumeMounts:[{name:"capture-storage",mountPath:"/captures"}],securityContext:{privileged:!0}}]}}}}}function O(){const[n,v]=l.default.useState(!1),[o,u]=l.default.useState(!0),[C,p]=l.default.useState(null),[y,b]=l.default.useState(!1),[k,M]=l.default.useState(""),[N,q]=l.default.useState("registry.dev.rdev.tech:18093/headlamp/universal-toolkit:1.0"),[D,A]=l.default.useState([]),[$,x]=l.default.useState(""),E=`/apis/apps/v1/namespaces/${d}/daemonsets/${P}`,z=`/api/v1/namespaces/${d}`,B=`/api/v1/namespaces/${d}/pods?labelSelector=${_}`,m=l.default.useCallback(async()=>{u(!0),p(null);const s=3,c=2e3;for(let f=1;f<=s;f++)try{await r.ApiProxy.request(E),v(!0);const a=`${B}&t=${new Date().getTime()}`,i=await r.ApiProxy.request(a);A(i.items||[]),u(!1);return}catch(a){if(a.status===404){v(!1),A([]),u(!1);return}if(f<s)console.warn(`Attempt ${f} failed, retrying in ${c/1e3}s...`,a),await new Promise(i=>setTimeout(i,c));else{console.error("Failed to check DaemonSet status after multiple retries:",a),p(`检查抓包工具状态失败: ${a.message||"Unreachable"}`),u(!1);return}}},[E,B]);l.default.useEffect(()=>{m()},[m]);const U=async()=>{try{await r.ApiProxy.request(z)}catch(s){if(s.status===404){console.log(`Namespace ${d} not found, creating it...`);try{await r.ApiProxy.request("/api/v1/namespaces",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({apiVersion:"v1",kind:"Namespace",metadata:{name:d}})})}catch(c){throw new Error(`创建命名空间 ${d} 失败: ${c.message}`)}}else throw s}},W=async()=>{u(!0),p(null);try{await U();const s=L(k,N);await r.ApiProxy.request(`/apis/apps/v1/namespaces/${d}/daemonsets`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}),setTimeout(m,2e3)}catch(s){console.error("Failed to start capture:",s),p(`启动抓包失败: ${s.message||"未知错误"}`),u(!1)}},j=async()=>{u(!0),p(null);try{await r.ApiProxy.request(E,{method:"DELETE"}),setTimeout(m,2e3)}catch(s){console.error("Failed to stop capture:",s),p(`停止抓包失败: ${s.message||"未知错误"}`),u(!1)}};l.default.useCallback(async()=>{try{const s=await r.K8s.ResourceClasses.Service.apiGet({name:T,namespace:F});if(!s||!s.spec||!s.spec.ports||s.spec.ports.length===0)throw new Error(`Service "${T}" has no spec.ports defined.`);const c=s.spec.ports[0];if(c&&c.nodePort)return console.log(`Successfully fetched NodePort: ${c.nodePort}`),c.nodePort;throw new Error(`Service "${T}" found, but it has no nodePort defined.`)}catch(s){throw console.error(`Failed to get backend NodePort service: ${s}`),new Error(`无法获取后端服务端口: ${s.message||"未知错误"}`)}},[]);const J=async()=>{b(!0),p(null),x("正在连接后端...");const s=window.location.hostname,c=31138,f=`ws://${s}:${c}/ws`,a=new WebSocket(f);a.onopen=()=>{x("连接成功，正在发送任务...");const i="task-"+Date.now(),h=D.map(w=>({name:w.metadata.name,nodeName:w.spec.nodeName}));a.send(JSON.stringify({taskID:i,podsToCollect:h}))},a.onmessage=i=>{const h=JSON.parse(i.data);if(x(h.message),h.status==="complete"){x("任务完成，正在触发下载...");const w=`http://${s}:${c}${h.url}`,S=document.createElement("a");S.href=w,S.download=`cluster-capture-${new Date().toISOString()}.pcap`,document.body.appendChild(S),S.click(),document.body.removeChild(S),a.close(),b(!1),setTimeout(m,2e3)}h.status==="error"&&(p(`后端任务失败: ${h.message}`),a.close(),b(!1))},a.onerror=i=>{p("WebSocket 连接错误"),console.error("WebSocket error:",i),b(!1)},a.onclose=()=>{console.log("WebSocket 连接已关闭"),!C&&$!=="任务完成，正在触发下载..."&&b(!1)}};return e.jsxs(t.Paper,{sx:{m:2,p:3},children:[e.jsx(t.Typography,{variant:"h4",gutterBottom:!0,children:"集群网络抓包工具"}),C&&e.jsx(t.Alert,{severity:"error",sx:{mb:2},children:C}),y&&$&&e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center"},children:[e.jsx(t.CircularProgress,{size:20,sx:{mr:2}}),e.jsx(t.Typography,{children:$})]})}),e.jsxs(t.Box,{sx:{p:2,border:"1px solid",borderColor:"divider",borderRadius:1,mb:4},children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"控制面板"}),e.jsxs(t.Box,{children:[e.jsx(t.TextField,{label:"抓包镜像",fullWidth:!0,variant:"outlined",size:"small",value:N,onChange:s=>q(s.target.value),disabled:n||o,sx:{mb:2}}),e.jsxs(t.Box,{sx:{display:"flex",gap:2,alignItems:"center",flexWrap:"wrap"},children:[e.jsx(t.TextField,{label:"抓包过滤规则 (BPF Filter)",variant:"outlined",size:"small",value:k,onChange:s=>M(s.target.value),disabled:n||o,sx:{flexGrow:1,minWidth:"300px"}}),n?e.jsxs(e.Fragment,{children:[e.jsx(t.Button,{variant:"contained",color:"secondary",onClick:J,disabled:o,startIcon:y&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:y?"正在处理...":"停止并下载"}),e.jsx(t.Button,{variant:"outlined",color:"error",onClick:j,disabled:o,startIcon:o&&!y&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:o&&!y?"正在停止...":"仅停止 (不下载)"})]}):e.jsx(t.Button,{variant:"contained",color:"primary",onClick:W,disabled:o,startIcon:o&&e.jsx(t.CircularProgress,{size:20,color:"inherit"}),children:o?"正在启动...":"开始抓包"})]})]})]}),e.jsxs(t.Box,{children:[e.jsx(t.Typography,{variant:"h6",gutterBottom:!0,children:"状态"}),o&&!C&&e.jsxs(t.Box,{sx:{display:"flex",alignItems:"center",mt:2},children:[e.jsx(t.CircularProgress,{size:24}),e.jsx(t.Typography,{sx:{ml:2},children:"正在加载状态..."})]}),!o&&(n?e.jsxs(e.Fragment,{children:[e.jsxs(t.Alert,{severity:"success",sx:{mb:2},children:["抓包正在进行中... DaemonSet '",P,"' 已在 ",e.jsx("strong",{children:d})," 命名空间部署。"]}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包文件说明"}),e.jsx(t.Alert,{severity:"info",sx:{mb:2},children:'新功能: 点击 "停止并下载" 按钮会自动收集所有节点的抓包文件，合并后提供下载，并清理抓包环境。'}),e.jsx(t.Typography,{variant:"subtitle1",gutterBottom:!0,children:"抓包 Pod 状态"}),e.jsx(t.TableContainer,{component:t.Paper,variant:"outlined",children:e.jsxs(t.Table,{size:"small",children:[e.jsx(t.TableHead,{children:e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:"Pod 名称"}),e.jsx(t.TableCell,{children:"所在节点"}),e.jsx(t.TableCell,{children:"状态"})]})}),e.jsx(t.TableBody,{children:D.map(s=>e.jsxs(t.TableRow,{children:[e.jsx(t.TableCell,{children:s.metadata.name}),e.jsx(t.TableCell,{children:s.spec.nodeName}),e.jsx(t.TableCell,{children:s.status.phase})]},s.metadata.uid))})]})})]}):e.jsx(t.Alert,{severity:"info",children:'抓包工具当前未运行。请配置参数后点击 "开始抓包"。'}))]})]})}const g="kubexm-capture";r.registerSidebarEntry({parent:null,name:g,label:"网络抓包工具",url:`/${g}`,icon:"mdi:bug-outline"}),r.registerRoute({path:`/${g}`,sidebar:g,name:g,exact:!0,component:O})});
